  <dependencies>
  <!-- https://mvnrepository.com/artifact/javax.ws.rs/javax.ws.rs-api -->
<dependency>
    <groupId>javax.ws.rs</groupId>
    <artifactId>javax.ws.rs-api</artifactId>
    <version>2.1.1</version>
</dependency>
  
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>3.8.1</version>
    </dependency>
        <dependency>
	    <groupId>org.mock-server</groupId>
	    <artifactId>mockserver-netty</artifactId>
	    <version>RELEASE</version>
    </dependency>
    <dependency>
	<groupId>org.mock-server</groupId>
	<artifactId>mockserver-client-java</artifactId>
	<version>RELEASE</version>
</dependency>
    
  </dependencies>

  <build>
    <pluginManagement><!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) -->
      <plugins>
      <plugin>
    <groupId>org.mock-server</groupId>
    <artifactId>mockserver-maven-plugin</artifactId>
    <version>RELEASE</version>
    <configuration>
        <serverPort>1080</serverPort>
        <pipeLogToConsole>true</pipeLogToConsole>
     </configuration>
        
     </plugin>


............................
package testmockserver.com.test;

import static io.netty.handler.codec.http.HttpHeaderNames.CONTENT_TYPE;
import static org.mockserver.character.Character.NEW_LINE;
import static org.mockserver.model.HttpRequest.request;
import static org.mockserver.model.HttpResponse.response;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Collection;

import org.apache.commons.io.FileUtils;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.mockserver.client.MockServerClient;
import org.mockserver.integration.ClientAndServer;
import org.mockserver.model.Header;
import javax.ws.rs.core.MediaType;

public class TestMockServer {
	public  ClientAndServer mockServer;

	@Before
	public void before() {
	   mockServer = mockServer.startClientAndServer(1980);

	}
	@Test
	public void mut() throws IOException {
		this.mockmuthu();
	}

	
	@After
	public void stopMockServer() {
	  mockServer.stop();
	}

	public void mockmuthu() throws IOException {
		File file = new File("C:\\Users\\Muthukumar\\Desktop\\Muthu\\json\\");       
		Collection<File> files = FileUtils.listFiles(file, null, true);     
		for(File file2 : files){
			
		mockServer
		.when(
                request()
                    .withPath("/"+file2.getName().replace(".json", ""))
            )
            .respond(
                response()
                .withStatusCode(200)
                    .withHeaders(
                    		new Header(CONTENT_TYPE.toString(), MediaType.APPLICATION_JSON)
                            ).withBody(
                            		this.jsonToString("C:\\Users\\Muthukumar\\Desktop\\Muthu\\json\\"+file2.getName()))
                );
		}
	}
	
	public String jsonToString(String path) throws IOException {
		 return new String(Files.readAllBytes(Paths.get(path)));
	}
	
}
